set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle
call vundle#rc()

"set rtp+=~/git/powerline/powerline/bindings/vim
" This is the Vundle package, which can be found on GitHub.
" For GitHub repos, you specify plugins using the
" 'user/repository' format
Plugin 'gmarik/Vundle'

" We could also add repositories with a ".git" extension
Plugin 'scrooloose/nerdtree.git'

" To get plugins from Vim Scripts, you can reference the plugin
" by name as it appears on the site

" autocompletion with YouCompleteMe
Plugin 'Valloric/YouCompleteMe'

" auto comment generator with doxygen
Plugin 'DoxygenToolkit.vim'
Plugin 'taglist.vim'

" python sintax highlighting
Plugin 'scrooloose/syntastic'  

Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'easymotion/vim-easymotion'

Plugin 'LaTeX-Box-Team/LaTeX-Box'

" super automatic 
Plugin 'ervandew/supertab'

" vim airline for design solarized for colors
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'altercation/vim-colors-solarized'

" shell commands in vim
Plugin 'Shougo/vimshell.vim'
Plugin 'Shougo/vimproc.vim'

Plugin 'weynhamz/vim-plugin-minibufexpl'
" Tmux integration
Plugin 'benmills/vimux'

" autoread like autoscroll
Plugin 'chrisbra/vim-autoread'

" Powerline
"Bundle 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}

"call vundle#end()
" Now we can turn our filetype functionality back on
filetype plugin indent on
syntax on
set omnifunc=syntaxcomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete
"let &t_Co=256
map <F2> 	:NERDTreeToggle<CR>
"map <C-Left>	:tabp<CR>
"map <C-Right>	:tabn<CR>
"map <C-n>	:tabnew<CR>
set expandtab
set tabstop=8
set softtabstop=4
set shiftwidth=4
set autoindent
set number

" minibuff
let g:miniBufExplorerAutoStart = 0
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
imap <C-L> <Esc>
map <F4>        :MBEToggle<cr>
map <F6>        :normal gg=G:wall<CR>

let mapleader = ","
noremap <C-Down>  <C-W>j
noremap <C-Up>    <C-W>k
noremap <C-Left>  <C-W>h
noremap <C-Right> <C-W>l
map <leader>l     :MBEbn<CR>
map <leader>h     :MBEbp<CR>
map <leader>e     :MBEbd<CR>

"syntastic 
let g:syntastic_python_checkers=["pylama"]
let g:syntastic_python_pylama_args="--ignore=E501"

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"

"latex - box
" augroup latex
"     au!
"     au BufEnter *   map <F3> 	:TlistToggle<CR>
"     au BufEnter *   map <F5>    :Dox<CR>
"     au BufNewFile,BufRead,BufEnter *.tex let g:LatexBox_split_type="new"
"     au BufNewFile,BufRead,BufEnter *.tex let g:LatexBox_quickfix=3
"     au BufNewFile,BufRead,BufEnter *.tex let g:LatexBox_latexmk_preview_continously=1
"     au BufNewFile,BufRead,BufEnter *.tex let g:LatexBox_latexmk_async=1
"     au BufNewFile,BufRead,BufEnter *.tex map <F3> :LatexTOCToggle<CR> 
" augroup END
let bla = expand("%:e")
if  bla !=? "tex"
    map <F5> : Dox<CR>
    map <F3> :TlistToggle<CR>
endif

if bla ==? "tex"
    let g:tex_flavor='latex'
    let g:LatexBox_quickfix=3
    let g:LatexBox_split_type="new"
    let g:LatexBox_latexmk_async=1
    let g:LatexBox_latexmk_preview_continously=1
    map <F3> :LatexTOCToggle<CR>
endif

map <F7> :Latexmk<CR> 
map <leader>v :LatexView<CR>

" Toggle spell checking on and off with `,s`
map <leader>s :set spell!<CR>
map <leader>g gq}<CR>
map <leader>d ]S
map <leader>a [S
map <leader>w z=
map <leader>x :%!xmllint --format %<CR>

set spelllang=en_us

" YCM stuff
let g:ycm_extra_conf_globlist = ['~/workspace/*']

" Geekbench
noremap <F8> :Geeknote<cr>
let g:GeeknoteFormat="markdown"
noremap <F8> :Geeknote<CR>

" Powerline stuff
"set laststatus=2
" vim airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_theme = 'solarized'
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9


" solarized
set background=light
colorscheme solarized

" deletes empty lines
command DeleteEmptyLine :g/^$/d

" search and repleace in visual mode
" By pressing ctrl+r in visual mode, you will be prompted to enter text to replace with. Press enter and then confirm each change you agree with y or decline with n.
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" search in visual mode
" By pressing ctrl+r in visual mode, you will be prompted to enter text to replace with. Press enter and then confirm each change you agree with y or decline with n.
vnoremap <C-d> "hy:g/.*<C-r>h.*/d<CR>
